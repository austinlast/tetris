import unittest
from game import Game
from piece import Piece
from settings import WIDTH, HEIGHT, SHAPES, grid

class TestTetrisGame(unittest.TestCase):
    def setUp(self):
        self.game = Game()

    def test_start_game_state(self):
        #Tests that the game starts correctly
        self.assertFalse(self.game.game_over)
        self.assertEqual(self.game.score, 0)
        self.assertEqual(self.game.level, 1)
        self.assertIsNotNone(self.game.current_piece)

    def test_new_piece_generation(self):
        #Tests that a new piece is created
        self.game.new_piece()
        self.assertIsNotNone(self.game.current_piece)

    def test_hold_piece(self):
        #Tests that holding a piece works right
        initial_piece = self.game.current_piece
        self.game.hold_current_piece()
        self.assertIsNotNone(self.game.hold_piece)
        self.assertNotEqual(self.game.current_piece, initial_piece)

    def test_piece_movement(self):
        #Tests that a piece can move left, right, and down
        initial_x = self.game.current_piece.x
        self.game.current_piece.move(-1, 0)  # Move left
        self.assertEqual(self.game.current_piece.x, initial_x - 1)
        self.game.current_piece.move(1, 0)  # Move right
        self.assertEqual(self.game.current_piece.x, initial_x)
        initial_y = self.game.current_piece.y
        self.game.current_piece.move(0, 1)  # Move down
        self.assertEqual(self.game.current_piece.y, initial_y + 1)


class TestPiece(unittest.TestCase):

    def setUp(self):
        global grid
        grid = [[0] * WIDTH for _ in range(HEIGHT)]

    def test_piece_initialization(self):
        #Tests that a new piece is created with the right properties
        piece = Piece()
        self.assertIn(piece.label, [shape[0] for shape in SHAPES])
        self.assertTrue(0 <= piece.x < WIDTH)
        self.assertTrue(0 <= piece.y < HEIGHT)

    def test_piece_movement_valid(self):
        #Tests that a piece can move left, right, and down using is_valid
        piece = Piece()
        original_x, original_y = piece.x, piece.y

        piece.move(-1, 0)
        self.assertEqual(piece.x, original_x - 1)

        piece.move(1, 0)
        self.assertEqual(piece.x, original_x)

        piece.move(0, 1)
        self.assertEqual(piece.y, original_y + 1)

    def test_piece_rotation_valid(self):
        #Tests that a piece rotates correctly when valid
        piece = Piece()
        original_shape = piece.shape
        piece.rotate()
        self.assertNotEqual(piece.shape, original_shape)

    def test_piece_rotation_invalid(self):
        #Tests that a piece does not rotate if blocked.
        piece = Piece()
        piece.x = 0
        original_shape = piece.shape
        piece.rotate()
        self.assertTrue(piece.shape == original_shape or piece.x >= 0)


if __name__ == '__main__':
    (unittest.main())
